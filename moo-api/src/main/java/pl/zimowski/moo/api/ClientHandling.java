package pl.zimowski.moo.api;

/**
 * Handling of actions generated by a client. Typically implemented by specific client
 * library (eg, web socket client, jms client, etc). UI that depends on a client will
 * almost always inject by interface expecting the client to provide the one and only
 * available implementation. As UI is not bound to any particular client, it must not
 * and it should not care about the implementation.
 *
 * @since 1.2.0
 * @author Adam Zimowski (<a href="mailto:mrazjava@yandex.com">mrazjava</a>)
 */
public interface ClientHandling {

	/**
	 * Establises connection with the server. This call is generally required before
	 * events can be sent.
	 *
	 * @param reporter (provided by the UI) where events should be reported to
	 * @return {@code true} if connection was successfully established; {@code false} otherwise
	 */
	boolean connect(ClientReporting reporter);

	/**
	 * Determines if connection between a client and a server is established.
	 *
	 * @return {@code true} if client is connected to a server; {@code false} otherwise
	 */
	boolean isConnected();

	/**
	 * Terminates server connection. After this call, subsequent sending of events
	 * will fail.
	 */
	void disconnect();

	/**
	 * Notifies the server of a specific event on a client. The server will generally respond
	 * with equivalent server event, notifying back either the client that produced the
	 * original event, or all connected client. For example, if a client event is to request
	 * random nick name, the server will respond directly to the client requesting the nick
	 * name. On the other hand, if an event contains a public chat message, the server will
	 * respond with a server message broadcast to all connected clients.
	 *
	 * @param event to be sent to the server
	 */
	void send(ClientEvent event);
}
