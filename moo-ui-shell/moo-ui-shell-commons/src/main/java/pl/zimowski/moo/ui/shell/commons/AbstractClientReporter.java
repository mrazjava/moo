package pl.zimowski.moo.ui.shell.commons;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import pl.zimowski.moo.api.ClientAction;
import pl.zimowski.moo.api.ClientEvent;
import pl.zimowski.moo.api.ClientReporting;

/**
 * Recommended base for shell based client reporters. Since shell UI
 * is bound to one client and one chat user, this reporter base retains the client
 * id and user nick name. In addition, provides convenient builder methods for
 * client events which get automatically populated with information retained from
 * server events (client id, nick name, etc).
 *
 * @since 1.2.0
 * @author Adam Zimowski (<a href="mailto:mrazjava@yandex.com">mrazjava</a>)
 */
public abstract class AbstractClientReporter implements ClientReporting {

	public static final Logger LOG = LoggerFactory.getLogger("CHAT_ECHO");

	protected String nick;

	protected String clientId;

	/**
	 * Name to be reported when messages are generated by UI listener.
	 * Not to confuse with chat user (author of chat events).
	 *
	 * @return author reported as listener (eg: reader or writer)
	 */
	public abstract String getAuthor();

	@Override
	public void onBeforeServerConnect(String uri) {
		LOG.info("({}) establishing connection to {}", getAuthor(), uri);
	}

	@Override
	public void onConnectToServerError(String error) {
		LOG.info("({}) could not establish server connection: {}", getAuthor(), error);
	}

	public String getClientId() {
		return clientId;
	}

	/**
	 * Access to nick name of a user that is interacting with the chat session.
	 *
	 * @return nick name of the user bound to this listener
	 */
	public String getNick() {
		return nick;
	}

	public void setNick(String nick) {
		this.nick = nick;
	}

    /**
     * Constructs a new client event with a specific action. Client ID
     * is automatically set.
     *
     * @param action for the new event
     * @return event with the desired action and a client id
     */
    public ClientEvent newEvent(ClientAction action) {
        return new ClientEvent(action).withClientId(clientId);
    }

    /**
     * @return raw event with {@link ClientAction#Signin} and nothing else set
     */
    public ClientEvent newSigninEvent() {
        return newEvent(ClientAction.Signin);
    }

    /**
     * @return raw event with {@link ClientAction#GenerateNick} and nothing else set
     */
    public ClientEvent newGenerateNickEvent() {
        return newEvent(ClientAction.GenerateNick);
    }

    /**
     * Constructs a new {@link ClientAction#Message} event with a desired message.
     * The client id and author of a message (user nick) is automatically set.
     *
     * @param message associated with the event
     * @return new message event
     */
    public ClientEvent newMessageEvent(String message) {
        return newEvent(ClientAction.Message)
                .withClientId(clientId)
                .withAuthor(nick)
                .withMessage(message);
    }

    /**
     * @return new {@link ClientAction#Signoff} event with client id and nick name also set
     */
    public ClientEvent newSignoffEvent() {
        return newEvent(ClientAction.Signoff)
                .withClientId(clientId)
                .withAuthor(nick);
    }

    /**
     * @return new {@link ClientAction#Disconnect} event with client id also set
     */
    public ClientEvent newDisconnectEvent() {
        return newEvent(ClientAction.Disconnect)
                .withClientId(clientId);
    }
}