package pl.zimowski.moo.server;

import java.net.Socket;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import pl.zimowski.moo.api.ServerEvent;

/**
 * Handler of a live connection between client and server. Listens for events
 * generated by a connected client and emits them onto a server. Likewise,
 * listens for events from the server and emits them back to a client.
 *
 * @since 1.0.0
 * @author Adam Zimowski (<a href="mailto:mrazjava@yandex.com">mrazjava</a>)
 */
public class ClientThread extends Thread implements ClientNotification {

    private static final Logger log = LoggerFactory.getLogger(ClientThread.class);

    private Socket socket;

    private ServerNotification serverNotifier;


    /**
     * Constructs an live link between client and a server. The link is
     * established over a socket and server notifier. This is all that a
     * running thread needs to exchange information between client and a
     * server.
     *
     * @param socket connection established by the client
     * @param serverNotifier used to inform server about events received from the client
     */
    public ClientThread(Socket socket, ServerNotification serverNotifier) {
        this.socket = socket;
        this.serverNotifier = serverNotifier;
    }

    @Override
    public void notify(ServerEvent event) {

        log.debug("received: {}", event);
    }

    @Override
    public int hashCode() {

        int result = 23;
        result = 31 * result + (socket == null ? 0 : socket.hashCode());
        result = 31 * result + (serverNotifier == null ? 0 : serverNotifier.hashCode());
        return result;
    }

    @Override
    public String toString() {
        return "ClientThread [socket=" + socket + "]";
    }
}